name: Docker Build Verification

on:
  pull_request:
    paths:
      - 'Dockerfile'
      - 'next.config.ts'
      - '.dockerignore'
  workflow_dispatch:

jobs:
  verify-docker-build:
    name: Verify Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install
          fi

      - name: Build Next.js application
        run: pnpm build

      - name: Verify standalone output structure
        run: |
          echo "Checking standalone build structure..."
          ls -la .next/
          ls -la .next/standalone/

          # Verify server.js exists
          if [ -f ".next/standalone/server.js" ]; then
            echo "✅ server.js found in standalone output"
          else
            echo "❌ server.js not found in standalone output"
            exit 1
          fi

          # Verify static files
          if [ -d ".next/static" ]; then
            echo "✅ Static files directory found"
          else
            echo "❌ Static files directory not found"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: smart-cv-builder:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d --name test-container -p 3000:3000 smart-cv-builder:test

          # Wait for container to be ready
          sleep 10

          # Test health endpoint
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health; then
              echo "✅ Health check passed"
              break
            fi
            echo "Waiting for container to be ready... ($i/30)"
            sleep 2
          done

          # Cleanup
          docker stop test-container
          docker rm test-container
