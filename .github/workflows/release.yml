name: Release Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  quality-gates:
    name: Final Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install
          fi

      - name: Code formatting check
        run: pnpm format:check

      - name: Lint code
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test --coverage --watchAll=false

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 1

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: quality-gates
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install
          fi

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10

  build-and-push-image:
    name: Build & Push Container Image
    runs-on: ubuntu-latest
    needs: [quality-gates, semantic-release]
    if: needs.semantic-release.outputs.new-release-published == 'true'
    permissions:
      contents: read
      packages: write
    continue-on-error: true # Don't fail the entire pipeline if container push fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ needs.semantic-release.outputs.new-release-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-release.outputs.new-release-version }}
            type=semver,pattern={{major}},value=${{ needs.semantic-release.outputs.new-release-version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [semantic-release]
    if: needs.semantic-release.outputs.new-release-published == 'true'
    environment:
      name: staging
      url: https://staging.smart-cv-builder.com

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ needs.semantic-release.outputs.new-release-version }} to staging"
          # Example deployment options (uncomment and configure as needed):

          # Option 1: Kubernetes with kubectl
          # kubectl set image deployment/smart-cv-builder app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }}

          # Option 2: Docker Compose
          # export IMAGE_TAG=${{ needs.semantic-release.outputs.new-release-version }}
          # docker-compose -f docker-compose.staging.yml up -d

          # Option 3: SSH deployment to VPS
          # ssh user@staging-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }} && docker-compose up -d"

          # Option 4: Cloud provider CLI (AWS/GCP/Azure)
          # aws ecs update-service --cluster staging --service smart-cv-builder --force-new-deployment

  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [semantic-release, deploy-staging]
    if: needs.semantic-release.outputs.new-release-published == 'true'
    environment:
      name: production-approval

    steps:
      - name: Manual approval required
        run: echo "Manual approval required for production deployment"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [semantic-release, production-approval]
    if: needs.semantic-release.outputs.new-release-published == 'true'
    environment:
      name: production
      url: https://smart-cv-builder.com

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.semantic-release.outputs.new-release-version }} to production"
          # Example production deployment (uncomment and configure as needed):

          # Option 1: Blue-Green deployment with Kubernetes
          # kubectl set image deployment/smart-cv-builder-blue app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }}
          # kubectl patch service smart-cv-builder -p '{"spec":{"selector":{"version":"blue"}}}'

          # Option 2: Rolling update
          # kubectl set image deployment/smart-cv-builder app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }}
          # kubectl rollout status deployment/smart-cv-builder

          # Option 3: Cloud provider deployment
          # aws ecs update-service --cluster production --service smart-cv-builder --force-new-deployment
